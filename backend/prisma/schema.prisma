generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIN
  MANAGER
}

enum CargoRequestStatus {
  PENDING
  PROCESSING
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

model User {
  id         String         @id @default(uuid())
  firstName  String
  lastName   String
  email      String         @unique
  password   String
  phone      String
  company    String?
  role       UserRole       @default(CLIENT)
  createdAt  DateTime       @default(now())
  requests   CargoRequest[]
  
  @@index([email])
  @@index([createdAt])
}

model CargoRequest {
  id                String            @id @default(uuid())
  cargoTypeId       String
  vehicleTypeId     String
  weight            Float
  volume            Float
  distance          Float
  status            CargoRequestStatus
  cost              Float
  userId            String
  tariffId          String
  baseRate          Float
  weightRate        Float
  volumeRate        Float
  distanceRate      Float
  fromAddressId     String
  toAddressId       String
  transportationDateTime DateTime
  statusHistory     CargoRequestStatusHistory[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id])
  cargoType         CargoType         @relation(fields: [cargoTypeId], references: [id])
  vehicleType       VehicleType       @relation(fields: [vehicleTypeId], references: [id])
  tariff            Tariff            @relation(fields: [tariffId], references: [id])
  fromAddress       Address           @relation("FromAddress", fields: [fromAddressId], references: [id])
  toAddress         Address           @relation("ToAddress", fields: [toAddressId], references: [id])

  @@index([status])
  @@index([userId])
  @@index([createdAt])
  @@index([vehicleTypeId])
}

model CargoRequestStatusHistory {
  id         String             @id @default(uuid())
  status     CargoRequestStatus
  comment    String?
  createdAt  DateTime           @default(now())
  requestId  String
  request    CargoRequest       @relation(fields: [requestId], references: [id])
  
  @@index([requestId])
}

model Tariff {
  id            String      @id @default(uuid())
  name          String      @unique
  baseRate      Float
  weightRate    Float
  volumeRate    Float
  distanceRate  Float
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  vehicleTypes  VehicleTypeOnTariff[]
  cargoTypes    CargoTypeOnTariff[]
  requests      CargoRequest[]

  @@index([isActive])
}

model VehicleType {
  id         String         @id @default(uuid())
  name       String         @unique
  maxWeight  Float
  maxVolume  Float
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  tariffs    VehicleTypeOnTariff[]
  requests   CargoRequest[]
}

model CargoType {
  id          String         @id @default(uuid())
  name        String         @unique
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  tariffs     CargoTypeOnTariff[]
  requests    CargoRequest[]
}

model Address {
  id          String         @id @default(uuid())
  city        String
  street      String
  building    String
  region      String?
  postalCode  String?
  country     String         @default("Россия")
  createdAt   DateTime       @default(now())
  fromRequests CargoRequest[] @relation("FromAddress")
  toRequests   CargoRequest[] @relation("ToAddress")

  @@unique([city, street, building, postalCode])
}

// Связующая таблица для VehicleType и Tariff
model VehicleTypeOnTariff {
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])
  vehicleTypeId String
  tariff        Tariff      @relation(fields: [tariffId], references: [id])
  tariffId      String
  createdAt     DateTime    @default(now())

  @@id([vehicleTypeId, tariffId])
  @@index([vehicleTypeId])
  @@index([tariffId])
}

// Связующая таблица для CargoType и Tariff
model CargoTypeOnTariff {
  cargoType   CargoType @relation(fields: [cargoTypeId], references: [id])
  cargoTypeId String
  tariff      Tariff    @relation(fields: [tariffId], references: [id])
  tariffId    String
  createdAt   DateTime  @default(now())

  @@id([cargoTypeId, tariffId])
  @@index([cargoTypeId])
  @@index([tariffId])
}
